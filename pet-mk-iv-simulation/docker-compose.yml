# Launch [Builds Image, (re)creates & starts Container] using $ docker compose
# - Based on Dockerfile in current directory = '/home/${USER}/ws_ros2/src/pet_docker/pet-mk-iv-simulation'
#
# Prerequisite - On docker host: 
#       I) That '$ xhost local:docker' is started before the container is started. To enable GUI/X11 applications in the container
#----------------------
# Commands:
#   1)  Enable x11 gui from inside the Docker Image/Container
#       $ xhost local:docker
#
#   2a) Create/Start Container from Image : 
#       $ docker compose up --detach --build
#   2b) List running/active/paused
#       $ docker compose ps -all
#
#   3)  Connect bash to existing/new container: 
#       $ docker exec -it pet-mk-iv-simulation_container bash
#          OR
#       $ ./docker_exec.sh
#
#   4)  Stop, or remove, your container once you've finished with them.
#       $ docker conpose pause / unpause
#       $ docker compose stop / start
#       $ docker compose down    (stop & remove container)
#       $ docker container kill pet-mk-iv-simulation_container
#       $ docker container prune
#----------------------
# Maintainer: stefan.kull@gmail.com
# Licens: MIT
# https://github.com/Pet-Series
#
# "noetic" = ROS1
# "focal"  = Ubuntu 20.04 
#----------------------
# More info: 
#    - https://github.com/Pet-Series/pet_docker
#    - https://hub.docker.com/repositories/kullken
#    - https://hub.docker.com/repository/docker/kullken/ros1_amd64
#    - https://hub.docker.com/r/osrf/ros/tags?page=1&name=noetic
services:
  ros1:
    build: .
    image: kullken/ros1_amd64:pet-mk-iv-simulation
    container_name: pet-mk-iv-simulation_container
    labels:
      - "se.pet-series.description=ROS1 Noetic for Pet-Mk.IV[service]"
    deploy:
      labels:
        - "se.pet-series.description=ROS1 Noetic for Pet-Mk.IV[deploy]"
    environment:
      - DISPLAY=${DISPLAY}
      - HOSTUSER=${USER} 
    privileged: true
    network_mode: host
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:rw   # Enable X11
      - /etc/localtime:/etc/localtime:ro   # Sync timezone
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    # restart: always
    # restart: unless-stopped